{"version":3,"file":"static/js/819.8d7d4f87.chunk.js","mappings":"mIACA,QAA6B,4BAA7B,EAAiE,uBAAjE,EAAmG,0BAAnG,EAAwI,0BAAxI,EAAkL,+BAAlL,EAA8N,4BAA9N,EAAuQ,4BAAvQ,EAAqT,iCAArT,EAAuW,gCAAvW,EAAoZ,4BAApZ,EAAkc,iCAAlc,EAAof,gCAApf,EAAgiB,2BAAhiB,EAAskB,0BAAtkB,EAAoqB,4BAApqB,EAA+sB,8BAA/sB,EAAiwB,mCAAjwB,EAAuzB,kCAAvzB,EAAu2B,6BAAv2B,EAAu5B,kCAAv5B,EAA28B,iCAA38B,EAAk/B,qB,0JC+Cl/B,QA3CA,WACE,MAAM,IAAEA,EAAG,OAAEC,IAAUC,EAAAA,EAAAA,IAAU,CAC/BC,UAAW,IAGb,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAkBF,SAAA,EACpCG,EAAAA,EAAAA,KAAA,WAASF,UAAWC,EAAaF,UAC/BG,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAgBF,SAAC,oNAElCG,EAAAA,EAAAA,KAAA,OAAKT,IAAKA,EAAKO,UAAWC,EAAgBF,SACzCL,GAAUQ,EAAAA,EAAAA,KAAA,OAAMF,UAAWC,EAAkBE,IAAKC,EAAWC,IAAI,cAAiB,MAEnFR,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAiBK,GAAG,WAAUP,SAAA,EAChDF,EAAAA,EAAAA,MAAA,UAAQG,UAAWC,EAAqBF,SAAA,CAAC,oMAAqCG,EAAAA,EAAAA,KAAA,SAAM,2JACpFL,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAkBF,SAAA,EACpCF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAkBF,SAAA,EACpCG,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAuBF,SAAC,qFACvCG,EAAAA,EAAAA,KAAA,KAAGF,UAAWC,EAAsBF,SAAC,6+EAEvCF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAkBF,SAAA,EACpCG,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAuBF,SAAC,uDACvCG,EAAAA,EAAAA,KAAA,KAAGF,UAAWC,EAAsBF,SAAC,q4FAGzCF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAkBF,SAAA,EACpCF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAoBF,SAAA,EACtCG,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAyBF,SAAC,uDACzCG,EAAAA,EAAAA,KAAA,KAAGF,UAAWC,EAAwBF,SAAC,8gFAEzCF,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAAmBF,SAAA,EACrCG,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAwBF,SAAC,0CACxCG,EAAAA,EAAAA,KAAA,KAAGF,UAAWC,EAAuBF,SAAC,gyDAK5CG,EAAAA,EAAAA,KAAA,OAAKC,IAAKI,EAAKF,IAAI,MAAML,UAAWC,MAG5C,C,8MC5CMO,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBC,KAAKD,IACJ,MAAO,GAAPE,OAAUF,EAAG,KAAAE,OACH,SAARF,GArBWG,EAsBGR,EAAQQ,OApBxBb,EAAQc,IAAID,KAChBX,GAAU,EACVF,EAAQe,IAAIF,EAAMX,EAAOc,aAFKhB,EAAQiB,IAAIJ,IADxB,IAsBRR,EAAQK,IAvBpB,IAAmBG,CAwBb,IAEDG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAf,EAAAgB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBlB,EAEjB,GACyC,qBAAhCsB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtB1B,EAAQnB,UAAyBmB,EAAQnB,UAAY,EAC9D8C,KAAM,EACNC,mBAAoBN,EACpBO,iBAAkBP,EAClBQ,WAAYR,IAEP,MAGT,CAEA,MAAM,GAAE/B,EAAA,SAAIwC,EAAA,SAAUC,GApFxB,SAAwBhC,GAEtB,MAAMT,EAAKQ,EAAYC,GACvB,IAAIiC,EAAWxC,EAAYmB,IAAIrB,GAE/B,IAAK0C,EAAU,CAEb,MAAMD,EAAW,IAAItC,IAErB,IAAIwC,EAEJ,MAAMH,EAAW,IAAIV,sBAAsBc,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAM3D,EACJ0D,EAAMb,gBACNU,EAAWK,MAAM1D,GAAcwD,EAAMX,mBAAqB7C,IAGxDmB,EAAQwC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAY9D,GAGpB,OAAA2D,EAAAN,EAASpB,IAAIyB,EAAMZ,UAAnBa,EAA4BF,SAASrB,IACnCA,EAASpC,EAAQ0D,EAAM,GACvB,GACF,GACDrC,GAGHkC,EACEH,EAASG,aACRQ,MAAMC,QAAQ3C,EAAQnB,WACnBmB,EAAQnB,UACR,CAACmB,EAAQnB,WAAa,IAE5BoD,EAAW,CACT1C,KACAwC,WACAC,YAGFvC,EAAYiB,IAAInB,EAAI0C,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAe5C,GAG5C6C,EAAYb,EAASpB,IAAIE,IAAY,GAQ3C,OAPKkB,EAASvB,IAAIK,IAChBkB,EAAStB,IAAII,EAAS+B,GAGxBA,EAAUC,KAAK/B,GACfgB,EAASlB,QAAQC,GAEV,WAEL+B,EAAUE,OAAOF,EAAUG,QAAQjC,GAAW,GAErB,IAArB8B,EAAU5B,SAEZe,EAASiB,OAAOnC,GAChBiB,EAASmB,UAAUpC,IAGC,IAAlBkB,EAASmB,OAEXpB,EAASqB,aACT3D,EAAYwD,OAAO1D,GAEvB,CACF,CC1GkC8D,EAAAA,UC7B3B,SAASzE,IAWiC,IAXvB,UACxBC,EAAA,MACAyE,EAAA,gBACAd,EAAA,WACAe,EAAA/C,KACAA,EAAA,YACAgD,EAAA,KACAC,EAAA,cACAC,EAAA,eACAvC,EAAA,SACAwC,GACF3C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAsB,EA+CE,MAAO5D,EAAKkF,GAAgBC,EAAAA,SAAyB,MAC/C9C,EAAiB8C,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9ClF,SAAU+E,EACVrB,WAAO,IAKTtB,EAASiD,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAAS/E,EAAK,OAElB,IAAIwE,EA4BJ,OA3BAA,EAAYrC,EACVnC,GACA,CAACC,EAAQ0D,KACP0B,EAAS,CACPpF,SACA0D,UAEEtB,EAASiD,SAASjD,EAASiD,QAAQrF,EAAQ0D,GAE3CA,EAAMb,gBAAkBgC,GAAeN,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE1C,OACA+C,aACA1E,YAEA2D,kBAEAc,SAEFnC,GAGK,KACD+B,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQ9D,GAAaA,EAAU8B,WAAa9B,EAClDH,EACA8B,EACA+C,EACAC,EACAC,EACAjB,EACArB,EACAmC,IAIJ,MAAMW,EAAc,OAAA3B,EAAAwB,EAAMzB,YAAN,EAAAC,EAAab,OAC3ByC,EAA4BL,EAAAA,SAE/BnF,IACDuF,GACCT,GACAC,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPpF,SAAU+E,EACVrB,WAAO,KAIX,MAAM8B,EAAS,CAACP,EAAQE,EAAMnF,OAAQmF,EAAMzB,OAO5C,OAJA8B,EAAOzF,IAAMyF,EAAO,GACpBA,EAAOxF,OAASwF,EAAO,GACvBA,EAAO9B,MAAQ8B,EAAO,GAEfA,CACT,C","sources":["webpack://nur-print/./src/utils/css/PageTwo.module.css?d838","Components/Main/PageTwo/PageTwo.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"acticleTwo\":\"PageTwo_acticleTwo__i7PB4\",\"Topic\":\"PageTwo_Topic__hiiz0\",\"NurPrint\":\"PageTwo_NurPrint__n1Doi\",\"WhatWeDo\":\"PageTwo_WhatWeDo__AegQC\",\"TopicWhatWeDo\":\"PageTwo_TopicWhatWeDo__p-JY1\",\"SectionOne\":\"PageTwo_SectionOne__MNB3i\",\"ChapterOne\":\"PageTwo_ChapterOne__gPwsK\",\"TopicChapterOne\":\"PageTwo_TopicChapterOne__m0yrv\",\"DescChapterOne\":\"PageTwo_DescChapterOne__TGpC-\",\"ChapterTwo\":\"PageTwo_ChapterTwo__Pkyeb\",\"TopicChapterTwo\":\"PageTwo_TopicChapterTwo__kItBx\",\"DescChapterTwo\":\"PageTwo_DescChapterTwo__pbvOC\",\"Lightning\":\"PageTwo_Lightning__CR2Zg\",\"LazyLoad\":\"PageTwo_LazyLoad__KOuNq\",\"SkeletonLightning\":\"PageTwo_SkeletonLightning__dNT2J\",\"SectionTwo\":\"PageTwo_SectionTwo__PTRyF\",\"ChapterThree\":\"PageTwo_ChapterThree__byGOI\",\"TopicChapterThree\":\"PageTwo_TopicChapterThree__3QwtX\",\"DescChapterThree\":\"PageTwo_DescChapterThree__ExWXL\",\"ChapterFour\":\"PageTwo_ChapterFour__FncyK\",\"TopicChapterFour\":\"PageTwo_TopicChapterFour__cla5p\",\"DescChapterFour\":\"PageTwo_DescChapterFour__JGOvS\",\"end\":\"PageTwo_end__dkEV7\",\"WhatWeDoFooter\":\"PageTwo_WhatWeDoFooter__Ez+5o\"};","import styles from '../../../utils/css/PageTwo.module.css'\nimport Lightning from '../../../img/PageTwo/download_image_1711793596008.webp'\nimport end from '../../../img/PageTwo/Group 33.png'\nimport { useInView } from \"react-intersection-observer\";\n\nfunction PageTwo() {\n  const { ref, inView} = useInView({\n    threshold: 0,\n  });\n\n  return (\n    <>\n      <article className={styles.acticleTwo} >\n        <section className={styles.Topic}>\n          <h1 className={styles.NurPrint}>РЕКЛАМНО-ПРОИЗВОДСТВЕННАЯ КОМПАНИЯ NUR PRINT</h1>\n        </section>\n        <div ref={ref} className={styles.LazyLoad} > \n        {inView ?  <img  className={styles.Lightning} src={Lightning} alt=\"Lightning\" /> : ''}\n        </div>\n        <section className={styles.WhatWeDo} id='WhatWeDo'>\n          <header className={styles.TopicWhatWeDo}>Мы творим рекламные шедевры, вывески <br /> что олицетворяют ваш бизнес</header>\n          <section className={styles.SectionOne}>\n            <section className={styles.ChapterOne}>\n              <h1 className={styles.TopicChapterOne}>Объемные буквы</h1>\n              <p className={styles.DescChapterOne}>Наши объемные световые буквы придают вашему бренду или мероприятию эффектный и современный вид. Эти буквы идеальны для витрин, логотипов компаний и создания выразительных архитектурных элементов. Наши световые буквы не только служат источником освещения, но и становятся ярким акцентом в темное время суток, привлекая внимание прохожих и создавая уютную атмосферу. С множеством вариантов цветов и стилей, мы гарантируем, что наши объемные световые буквы подчеркнут вашу уникальность</p>\n            </section>\n            <section className={styles.ChapterTwo}>\n              <h1 className={styles.TopicChapterTwo}> Таблички</h1>\n              <p className={styles.DescChapterTwo}>Начинаем с вашей идеи! Наши талантливые дизайнеры превращают ваши концепции в эстетически приятные и функциональные дизайны. Мы используем только лучшие материалы, гарантируя долговечность и стойкость наших табличек к внешним воздействиям. Наши опытные мастера тщательно обрабатывают материалы, а гравировка производится с высочайшей точностью, чтобы создать таблички, которые выделяются своей уникальностью. Каждая табличка проходит строгий контроль качества, чтобы гарантировать, что она соответствует нашим высоким стандартам перед отправкой клиенту</p>\n            </section>\n          </section>\n          <section className={styles.SectionTwo}>\n            <section className={styles.ChapterThree}>\n              <h1 className={styles.TopicChapterThree}>Фото Зона</h1>\n              <p className={styles.DescChapterThree}>Наши фотозоны создаются с любовью к деталям и творчеству. Забавные реквизиты, цветные фоны, и игривые декорации – все это для того, чтобы ваши гости чувствовали веселье и свободу перед камерой. Мы предлагаем создание фотозон под ваш тематический стиль. Будь то свадьба, день рождения или корпоративное мероприятие – мы подстраиваемся под ваши пожелания. Наши фотозоны обеспечивают высококачественные снимки. Мы используем передовые технологии и материалы для достижения отличных результатов</p>\n            </section>\n            <section className={styles.ChapterFour}>\n              <h1 className={styles.TopicChapterFour}>Стенды</h1>\n              <p className={styles.DescChapterFour}>Наши информационные стенды - идеальное решение для школ, организаций и заведений. Они предоставляют простой и наглядный способ передачи важной информации, будь то расписания, события или обучающие материалы. Современный дизайн и удобство в использовании делают наши стенды эффективным инструментом для коммуникации и организации пространства</p>\n            </section>\n          </section>\n        </section>\n      </article>\n        <img src={end} alt=\"end\" className={styles.end} />\n    </>\n  )\n}\n\nexport default PageTwo","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ref","inView","useInView","threshold","_jsxs","_Fragment","children","className","styles","_jsx","src","Lightning","alt","id","end","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}