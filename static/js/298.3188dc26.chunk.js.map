{"version":3,"file":"static/js/298.3188dc26.chunk.js","mappings":"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","sources":["webpack://nur-print/./src/utils/css/PageThree.module.css?d8ca","webpack://nur-print/./src/utils/css/UtilPgThree.module.css?c8b3","utils/UtilPgThree.jsx","img/PageThree/Subtract (2).svg","Components/Main/PageThree/PageThree.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"articleThree\":\"PageThree_articleThree__NDtc1\",\"HowWeWork\":\"PageThree_HowWeWork__hnmap\",\"Bgrnd\":\"PageThree_Bgrnd__-1LLm\",\"BgrndMob\":\"PageThree_BgrndMob__O+c4C\",\"footer\":\"PageThree_footer__JAGfE\",\"IphoneInst\":\"PageThree_IphoneInst__IldJa\",\"SkeletonIphoneInst\":\"PageThree_SkeletonIphoneInst__fMdFk\",\"PageThreeFooterBgrnd\":\"PageThree_PageThreeFooterBgrnd__tqN64\",\"ex\":\"PageThree_ex__cRlNH\",\"btnText\":\"PageThree_btnText__JLfI6\",\"BtnInst\":\"PageThree_BtnInst__MTUYX\",\"BtnWhatsApp\":\"PageThree_BtnWhatsApp__hoH1i\",\"BackShape\":\"PageThree_BackShape__j5SSk\"};","// extracted by mini-css-extract-plugin\nexport default {\"Numbers\":\"UtilPgThree_Numbers__JRlHW\",\"NumTopic\":\"UtilPgThree_NumTopic__TI8SZ\",\"NumDesc\":\"UtilPgThree_NumDesc__c0liH\",\"img\":\"UtilPgThree_img__38oam\",\"BtnWhatsApp\":\"UtilPgThree_BtnWhatsApp__VPi8u\",\"Section\":\"UtilPgThree_Section__tTdQE\",\"shapeTwo\":\"UtilPgThree_shapeTwo__Dr4Ec\"};","import styles from '../utils/css/UtilPgThree.module.css'\nimport NumOne from '..//img/PageThree/NumOne.webp'\nimport NumTwo from '../img/PageThree/NumTwo.webp'\nimport NumThree from '../img/PageThree/NumThree.webp'\nimport NumFour from '../img/PageThree/NumFour.webp'\nimport NumFive from '../img/PageThree/NumFive.webp'\n// import { useInView } from \"react-intersection-observer\";\n\nfunction UtilPgThree() {\n  // const { ref, inView } = useInView({\n  //   threshold: 0,\n  // });\n\n  const Numbers = [\n    {\n      imgNum: NumTwo,\n      NumTopic: \"Мы свяжемся\",\n      NumDesc: \"Мы с вами свяжемся и проконсультируем, сделаем предвратиельный просчет при наличии нужной информации\"\n    },\n    {\n      imgNum: NumThree,\n      NumTopic: \"Замер + Дизайн\",\n      NumDesc: \"Наши монтажники приедут на замер, а наш дизайнер сделает эскиз в реальных размерах\"\n    },\n    {\n      imgNum: NumFour,\n      NumTopic: \"Договор\",\n      NumDesc: \"Мы работаем официально по договору. Пропишем сроки, материалы и дадим гарантию\"\n    },\n    {\n      imgNum: NumFive,\n      NumTopic: \"Монтаж\",\n      NumDesc: \"Наши монтажники установят вашу вывеску, и сделают фото-отчет после вашей проверки сделаем все закрывающие документы\"\n    }\n  ]\n  return (\n    <div className={styles.Numbers} >\n      <section className={styles.Section}>\n        <img className={styles.img} src={NumOne} alt='Num' />\n        <h1 className={styles.NumTopic}>Оставьте заявку</h1>\n        <p className={styles.NumDesc}>Напишите нам на</p>\n        <a href=\"https://lyl.su/fn6\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <button className={styles.BtnWhatsApp}>WhatsApp</button>\n        </a>\n      </section>\n      {Numbers.map((num, i) => (\n        <section className={styles.Section} key={i}>\n          <img className={styles.img} src={num.imgNum} alt='Num' />\n          <h1 className={styles.NumTopic}>{num.NumTopic}</h1>\n          <p className={styles.NumDesc}>{num.NumDesc}</p>\n        </section>\n      ))}\n\n    </div>\n  )\n}\n\nexport default UtilPgThree","var _path, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSubtract2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 330,\n    height: 209,\n    viewBox: \"0 0 330 209\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M270.349 14.6612C293.902 8.69278 314.34 3.51385 330 4.5345V209H0V2.058C17.0604 -3.70271 43.3544 3.58124 74.395 12.1801C105.13 20.6942 140.518 30.4974 176.204 30.2032C210.12 29.9237 242.424 21.7375 270.349 14.6612Z\",\n    fill: \"url(#paint0_linear_73_77)\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_73_77\",\n    x1: 585.128,\n    y1: 230.5,\n    x2: 585.128,\n    y2: 44.5,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#00121C\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00A3FF\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSubtract2);\nexport default __webpack_public_path__ + \"static/media/Subtract (2).89a4dd0fdf873583ac44ae9a44694d09.svg\";\nexport { ForwardRef as ReactComponent };","import styles from '../../../utils/css/PageThree.module.css'\nimport UtilPgThree from '../../../utils/UtilPgThree'\nimport IphoneInst from '../../../img/PageThree/Project-Name-_14_-—-копия.webp'\nimport Bgrnd from '../../../img/PageThree/Frame 2 (5).png'\nimport BgrndMob from '../../../img/PageThree/Frame-3-_7_.webp'\nimport PageThreeFooterBgrnd from '../../../img/PageThree/Subtract (2).svg'\nimport { useInView } from \"react-intersection-observer\";\n\n\nfunction PageThree() {\n  const { ref, inView} = useInView({\n    threshold: 0,\n  });\n  return (\n    <article className={styles.articleThree} ref={ref}>\n      <h1 className={styles.HowWeWork} id='HowWeWork'>Как мы работаем</h1>\n      <img src={Bgrnd} alt=\"Bgrnd\" className={styles.Bgrnd} />\n      <img src={BgrndMob} alt=\"BgrndMob\" className={styles.BgrndMob} />\n      <UtilPgThree />\n      <footer className={styles.footer} >\n      {inView ?  <img className={styles.PageThreeFooterBgrnd} src={PageThreeFooterBgrnd} alt='PageThreeFooterBgrnd' /> : ''}\n        <div className={styles.ex}>\n\n          <h3 className={styles.btnText}>Или свяжитесь напрямую</h3>\n          <a href=\"https://www.instagram.com/nurprint_kg/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <button className={styles.BtnInst}>Instagram</button>\n          </a>\n        </div>\n        {inView ?  <img className={styles.IphoneInst} src={IphoneInst} alt='iphoneIcon' /> : <div className={styles.SkeletonIphoneInst}/>}\n      \n      </footer>\n    </article>\n  )\n}\n\nexport default PageThree","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Numbers","imgNum","NumTwo","NumTopic","NumDesc","NumThree","NumFour","NumFive","_jsxs","className","styles","children","_jsx","src","NumOne","alt","href","target","rel","map","num","i","ref","inView","useInView","threshold","id","Bgrnd","BgrndMob","UtilPgThree","PageThreeFooterBgrnd","IphoneInst","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}